<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>Java Pairing-Based Cryptography Library : Schemes - Hidden-Vector Encryption with Groups of Prime Order</title>
        <author email="jpbclib@gmail.com">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Hidden-Vector Encryption with Groups of Prime Order">
            <subsection name="Authors">
                V. Iovino and G. Persiano
            </subsection>

            <subsection name="Abstract">
                Predicate encryption schemes are encryption schemes in which
                each ciphertext Ct is associated with a binary attribute vector
                x = (x1, ..., xn) and keys K are associated with predicates. A key K can
                decrypt a ciphertext Ct if and only if the attribute vector of the
                cipher-text satisfies the predicate of the key. Predicate encryption schemes can
                be used to implement fine-grained access control on encrypted data and
                to perform search on encrypted data.
                Hidden vector encryption schemes [Boneh and Waters - TCC 2007] are
                encryption schemes in which each ciphertext Ct is associated with a
                binary vector x = (x1, ..., xn) and each key K is associated with binary
                vector y = (y1, ..., yn) with "don't care" entries (denoted with *). Key
                K can decrypt ciphertext Ct if and only if x and y agree for all i for
                which yi != *.
                Hidden vector encryption schemes are an important type of predicate
                encryption schemes as they can be used to construct more sophisticated
                predicate encryption schemes (supporting for example range and subset
                queries).
                We give a construction for hidden-vector encryption from standard
                complexity assumptions on bilinear groups of prime order. Previous
                constructions were in bilinear groups of composite order and thus resulted
                in less efficient schemes. Our construction is both payload-hiding and
                attribute-hiding meaning that also the privacy of the attribute vector,
                besides privacy of the cleartext, is guaranteed.
            </subsection>

            <subsection name="URL">
                <a href="http://eprint.iacr.org/2009/380.pdf">
                    http://eprint.iacr.org/2009/380.pdf
                </a>
            </subsection>
        </section>

        <section name="Usage">
<pre>

<a name="l1"><span class="ln">1    </span></a><span class="s0">package </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.hve.ip08;
<a name="l2"><span class="ln">2    </span></a>
<a name="l3"><span class="ln">3    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.fe.PredicateOnlyEncryptionScheme;
<a name="l4"><span class="ln">4    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.hve.ip08.engines.HVEIP08PredicateOnlyEngine;
<a name="l5"><span class="ln">5    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.hve.ip08.generators.HVEIP08KeyPairGenerator;
<a name="l6"><span class="ln">6    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.hve.ip08.generators.HVEIP08ParametersGenerator;
<a name="l7"><span class="ln">7    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.hve.ip08.generators.HVEIP08PredicateOnlySecretKeyGenerator;
<a name="l8"><span class="ln">8    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.hve.ip08.params.*;
<a name="l9"><span class="ln">9    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;
<a name="l10"><span class="ln">10   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.AsymmetricCipherKeyPair;
<a name="l11"><span class="ln">11   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.CipherParameters;
<a name="l12"><span class="ln">12   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.InvalidCipherTextException;
<a name="l13"><span class="ln">13   </span></a>
<a name="l14"><span class="ln">14   </span></a></span><span class="s0">import </span><span class="s1">java.security.SecureRandom;
<a name="l15"><span class="ln">15   </span></a></span><span class="s0">import </span><span class="s1">java.util.Random;
<a name="l16"><span class="ln">16   </span></a>
<a name="l17"><span class="ln">17   </span></a></span><span class="s0">import static </span><span class="s1">org.junit.Assert.assertEquals;
<a name="l18"><span class="ln">18   </span></a>
<a name="l19"><span class="ln">19   </span></a></span><span class="s2">/**
<a name="l20"><span class="ln">20   </span></a> * </span><span class="s3">@author </span><span class="s2">Angelo De Caro (jpbclib@gmail.com)
<a name="l21"><span class="ln">21   </span></a> */</span><span class="s1">
<a name="l22"><span class="ln">22   </span></a></span><span class="s0">public class </span><span class="s1">HVEIP08 {
<a name="l23"><span class="ln">23   </span></a>
<a name="l24"><span class="ln">24   </span></a>
<a name="l25"><span class="ln">25   </span></a>    </span><span class="s0">public </span><span class="s1">HVEIP08() {
<a name="l26"><span class="ln">26   </span></a>    }
<a name="l27"><span class="ln">27   </span></a>
<a name="l28"><span class="ln">28   </span></a>
<a name="l29"><span class="ln">29   </span></a>    </span><span class="s0">protected </span><span class="s1">AsymmetricCipherKeyPair setup(</span><span class="s0">int </span><span class="s1">n) {
<a name="l30"><span class="ln">30   </span></a>        HVEIP08KeyPairGenerator generator = </span><span class="s0">new </span><span class="s1">HVEIP08KeyPairGenerator();
<a name="l31"><span class="ln">31   </span></a>        generator.init(</span><span class="s0">new </span><span class="s1">HVEIP08KeyGenerationParameters(</span><span class="s0">new </span><span class="s1">SecureRandom(),
<a name="l32"><span class="ln">32   </span></a>                genBinaryParam(n)));
<a name="l33"><span class="ln">33   </span></a>
<a name="l34"><span class="ln">34   </span></a>        </span><span class="s0">return </span><span class="s1">generator.generateKeyPair();
<a name="l35"><span class="ln">35   </span></a>    }
<a name="l36"><span class="ln">36   </span></a>
<a name="l37"><span class="ln">37   </span></a>    </span><span class="s0">protected </span><span class="s1">CipherParameters keyGen(CipherParameters privateKey, </span><span class="s0">int</span><span class="s1">... pattern) {
<a name="l38"><span class="ln">38   </span></a>        HVEIP08PredicateOnlySecretKeyGenerator generator = </span><span class="s0">new </span><span class="s1">HVEIP08PredicateOnlySecretKeyGenerator();
<a name="l39"><span class="ln">39   </span></a>        generator.init(</span><span class="s0">new </span><span class="s1">HVEIP08SecretKeyGenerationParameters(
<a name="l40"><span class="ln">40   </span></a>                (HVEIP08MasterSecretKeyParameters) privateKey, pattern)
<a name="l41"><span class="ln">41   </span></a>        );
<a name="l42"><span class="ln">42   </span></a>
<a name="l43"><span class="ln">43   </span></a>        </span><span class="s0">return </span><span class="s1">generator.generateKey();
<a name="l44"><span class="ln">44   </span></a>    }
<a name="l45"><span class="ln">45   </span></a>
<a name="l46"><span class="ln">46   </span></a>    </span><span class="s0">protected byte</span><span class="s1">[] enc(CipherParameters publicKey, </span><span class="s0">int</span><span class="s1">... attributes) {
<a name="l47"><span class="ln">47   </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l48"><span class="ln">48   </span></a>            PredicateOnlyEncryptionScheme engine = </span><span class="s0">new </span><span class="s1">HVEIP08PredicateOnlyEngine();
<a name="l49"><span class="ln">49   </span></a>            engine.init(</span><span class="s0">true</span><span class="s1">, </span><span class="s0">new </span><span class="s1">HVEIP08EncryptionParameters((HVEIP08PublicKeyParameters) publicKey, attributes));
<a name="l50"><span class="ln">50   </span></a>
<a name="l51"><span class="ln">51   </span></a>            </span><span class="s0">return </span><span class="s1">engine.process();
<a name="l52"><span class="ln">52   </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l53"><span class="ln">53   </span></a>            </span><span class="s0">throw new </span><span class="s1">RuntimeException(e);
<a name="l54"><span class="ln">54   </span></a>        }
<a name="l55"><span class="ln">55   </span></a>    }
<a name="l56"><span class="ln">56   </span></a>
<a name="l57"><span class="ln">57   </span></a>    </span><span class="s0">protected boolean </span><span class="s1">evaluate(CipherParameters searchKey, </span><span class="s0">byte</span><span class="s1">[] ct) {
<a name="l58"><span class="ln">58   </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l59"><span class="ln">59   </span></a>            PredicateOnlyEncryptionScheme engine = </span><span class="s0">new </span><span class="s1">HVEIP08PredicateOnlyEngine();
<a name="l60"><span class="ln">60   </span></a>            engine.init(</span><span class="s0">false</span><span class="s1">, searchKey);
<a name="l61"><span class="ln">61   </span></a>
<a name="l62"><span class="ln">62   </span></a>            </span><span class="s0">return </span><span class="s1">engine.evaluate(ct);
<a name="l63"><span class="ln">63   </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l64"><span class="ln">64   </span></a>            </span><span class="s0">throw new </span><span class="s1">RuntimeException(e);
<a name="l65"><span class="ln">65   </span></a>        }
<a name="l66"><span class="ln">66   </span></a>    }
<a name="l67"><span class="ln">67   </span></a>
<a name="l68"><span class="ln">68   </span></a>
<a name="l69"><span class="ln">69   </span></a>    </span><span class="s0">protected </span><span class="s1">HVEIP08Parameters genBinaryParam(</span><span class="s0">int </span><span class="s1">n) {
<a name="l70"><span class="ln">70   </span></a>        HVEIP08ParametersGenerator generator = </span><span class="s0">new </span><span class="s1">HVEIP08ParametersGenerator();
<a name="l71"><span class="ln">71   </span></a>        generator.init(n, PairingFactory.getPairingParameters(</span><span class="s4">&quot;params/curves/a.properties&quot;</span><span class="s1">));
<a name="l72"><span class="ln">72   </span></a>
<a name="l73"><span class="ln">73   </span></a>        </span><span class="s0">return </span><span class="s1">generator.generateParameters();
<a name="l74"><span class="ln">74   </span></a>    }
<a name="l75"><span class="ln">75   </span></a>
<a name="l76"><span class="ln">76   </span></a>    </span><span class="s0">protected int</span><span class="s1">[][] createMatchingVectors(</span><span class="s0">int </span><span class="s1">n) {
<a name="l77"><span class="ln">77   </span></a>        </span><span class="s0">int</span><span class="s1">[][] result = </span><span class="s0">new int</span><span class="s1">[</span><span class="s5">2</span><span class="s1">][n];
<a name="l78"><span class="ln">78   </span></a>        Random random = </span><span class="s0">new </span><span class="s1">Random();
<a name="l79"><span class="ln">79   </span></a>
<a name="l80"><span class="ln">80   </span></a>        </span><span class="s0">for </span><span class="s1">(</span><span class="s0">int </span><span class="s1">i = </span><span class="s5">0</span><span class="s1">; i &lt; n; i++) {
<a name="l81"><span class="ln">81   </span></a>            </span><span class="s0">if </span><span class="s1">(i != </span><span class="s5">0  </span><span class="s1">&amp;&amp; i != </span><span class="s5">1 </span><span class="s1">&amp;&amp; random.nextBoolean()) {
<a name="l82"><span class="ln">82   </span></a>                </span><span class="s2">// it's a star</span><span class="s1">
<a name="l83"><span class="ln">83   </span></a>                result[</span><span class="s5">0</span><span class="s1">][i] = -</span><span class="s5">1</span><span class="s1">;
<a name="l84"><span class="ln">84   </span></a>                result[</span><span class="s5">1</span><span class="s1">][i] = random.nextInt(</span><span class="s5">2</span><span class="s1">);
<a name="l85"><span class="ln">85   </span></a>            } </span><span class="s0">else </span><span class="s1">{
<a name="l86"><span class="ln">86   </span></a>                result[</span><span class="s5">0</span><span class="s1">][i] = random.nextInt(</span><span class="s5">2</span><span class="s1">);
<a name="l87"><span class="ln">87   </span></a>                result[</span><span class="s5">1</span><span class="s1">][i] = result[</span><span class="s5">0</span><span class="s1">][i];
<a name="l88"><span class="ln">88   </span></a>            }
<a name="l89"><span class="ln">89   </span></a>        }
<a name="l90"><span class="ln">90   </span></a>        </span><span class="s0">return </span><span class="s1">result;
<a name="l91"><span class="ln">91   </span></a>    }
<a name="l92"><span class="ln">92   </span></a>
<a name="l93"><span class="ln">93   </span></a>    </span><span class="s0">protected int</span><span class="s1">[][] createNonMatchingVectors(</span><span class="s0">int </span><span class="s1">n) {
<a name="l94"><span class="ln">94   </span></a>        </span><span class="s0">int</span><span class="s1">[][] result = </span><span class="s0">new int</span><span class="s1">[</span><span class="s5">2</span><span class="s1">][n];
<a name="l95"><span class="ln">95   </span></a>        Random random = </span><span class="s0">new </span><span class="s1">Random();
<a name="l96"><span class="ln">96   </span></a>        </span><span class="s0">for </span><span class="s1">(</span><span class="s0">int </span><span class="s1">i = </span><span class="s5">0</span><span class="s1">; i &lt; n; i++) {
<a name="l97"><span class="ln">97   </span></a>            </span><span class="s0">if </span><span class="s1">(i != </span><span class="s5">0  </span><span class="s1">&amp;&amp; i != </span><span class="s5">1 </span><span class="s1">&amp;&amp; random.nextBoolean()) {
<a name="l98"><span class="ln">98   </span></a>                </span><span class="s2">// it's a star</span><span class="s1">
<a name="l99"><span class="ln">99   </span></a>                result[</span><span class="s5">0</span><span class="s1">][i] = -</span><span class="s5">1</span><span class="s1">;
<a name="l100"><span class="ln">100  </span></a>                result[</span><span class="s5">1</span><span class="s1">][i] = random.nextInt(</span><span class="s5">2</span><span class="s1">);
<a name="l101"><span class="ln">101  </span></a>            } </span><span class="s0">else </span><span class="s1">{
<a name="l102"><span class="ln">102  </span></a>                result[</span><span class="s5">0</span><span class="s1">][i] = random.nextInt(</span><span class="s5">2</span><span class="s1">);
<a name="l103"><span class="ln">103  </span></a>                result[</span><span class="s5">1</span><span class="s1">][i] = </span><span class="s5">1 </span><span class="s1">- result[</span><span class="s5">0</span><span class="s1">][i];
<a name="l104"><span class="ln">104  </span></a>            }
<a name="l105"><span class="ln">105  </span></a>        }
<a name="l106"><span class="ln">106  </span></a>        </span><span class="s0">return </span><span class="s1">result;
<a name="l107"><span class="ln">107  </span></a>    }
<a name="l108"><span class="ln">108  </span></a>
<a name="l109"><span class="ln">109  </span></a>
<a name="l110"><span class="ln">110  </span></a>    </span><span class="s0">public static void </span><span class="s1">main(String[] args) {
<a name="l111"><span class="ln">111  </span></a>        HVEIP08 hveip08 = </span><span class="s0">new </span><span class="s1">HVEIP08();
<a name="l112"><span class="ln">112  </span></a>
<a name="l113"><span class="ln">113  </span></a>        </span><span class="s0">int </span><span class="s1">n = </span><span class="s5">5</span><span class="s1">;
<a name="l114"><span class="ln">114  </span></a>        AsymmetricCipherKeyPair keyPair = hveip08.setup(n);
<a name="l115"><span class="ln">115  </span></a>
<a name="l116"><span class="ln">116  </span></a>        </span><span class="s0">int</span><span class="s1">[][] vectors = hveip08.createMatchingVectors(n);
<a name="l117"><span class="ln">117  </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">,
<a name="l118"><span class="ln">118  </span></a>                hveip08.evaluate(
<a name="l119"><span class="ln">119  </span></a>                        hveip08.keyGen(keyPair.getPrivate(), vectors[</span><span class="s5">0</span><span class="s1">]),
<a name="l120"><span class="ln">120  </span></a>                        hveip08.enc(keyPair.getPublic(), vectors[</span><span class="s5">1</span><span class="s1">]))
<a name="l121"><span class="ln">121  </span></a>        );
<a name="l122"><span class="ln">122  </span></a>
<a name="l123"><span class="ln">123  </span></a>        vectors = hveip08.createNonMatchingVectors(n);
<a name="l124"><span class="ln">124  </span></a>        assertEquals(</span><span class="s0">false</span><span class="s1">, hveip08.evaluate(
<a name="l125"><span class="ln">125  </span></a>                hveip08.keyGen(keyPair.getPrivate(), vectors[</span><span class="s5">0</span><span class="s1">]),
<a name="l126"><span class="ln">126  </span></a>                hveip08.enc(keyPair.getPublic(), vectors[</span><span class="s5">1</span><span class="s1">])))
<a name="l127"><span class="ln">127  </span></a>        ;
<a name="l128"><span class="ln">128  </span></a>    }
<a name="l129"><span class="ln">129  </span></a>
<a name="l130"><span class="ln">130  </span></a>
<a name="l131"><span class="ln">131  </span></a>}
<a name="l132"><span class="ln">132  </span></a>
<a name="l133"><span class="ln">133  </span></a></span></pre>
        </section>

    </body>
</document>

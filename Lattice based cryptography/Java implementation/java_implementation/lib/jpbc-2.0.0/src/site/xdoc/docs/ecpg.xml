<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>Java Pairing-Based Cryptography Library : Docs - Elliptic Curve Pairing Parameters Generators</title>
        <author email="jpbclib@gmail.com">Angelo De Caro</author>
    </properties>

    <body>
        <script type="text/javascript" src="http://latex.codecogs.com/latexit.js"/>

        <section name="Bilinear Pairing Parameters Generators">
            <p>
                Notice that, the parameters generated by PBC can be used by JPBC without any known issue.
            </p>

            <a name="TypeA"/>
            <subsection name="Type A">
                <p>
                    Type A pairings are constructed on the curve
                    <span lang="latex">y^2=x^3+x</span>
                    over the field
                    <span lang="latex">\mathbb{F}_q</span>
                    for some prime
                    <span lang="latex">q=3 \mod 4</span>.
                    Both
                    <span lang="latex">\mathbb{G}_1</span> and
                    <span lang="latex">\mathbb{G}_2</span> are the group of points
                    <span lang="latex">E(\mathbb{F}_q)</span>,
                    so this pairing is symmetric. The order
                    <span lang="latex">r</span> is some prime factor of
                    <span lang="latex">q+1</span>.
                </p>

                <p>
                    Further information are available
                    <a href="http://crypto.stanford.edu/pbc/manual/ch08s03.html">here</a>.
                </p>

                <p>
                    For Type A pairing, JPBC provides a ported and a PBC wrapped generator.
                    Here is the code to use them.
                </p>

                <source>import it.unisa.dia.gas.plaf.jpbc.pairing.a.TypeACurveGenerator;
import it.unisa.dia.gas.plaf.jpbc.pbc.curve.PBCTypeACurveGenerator;

int rBits = 160;
int qBits = 512;

// JPBC Type A pairing generator...
ParametersGenerator pg = new TypeACurveGenerator(rBits, qBits);
// PBC Type A pairing generator...
ParametersGenerator pbcPg = new PBCTypeACurveGenerator(rBits, qBits);
</source>

                <a name="TypeA1"/>
                <p>
                    Type A1 uses the same equation, but have different fields.
                    It supports fields of composite order.
                    <br/>
                    Also for Type A1 pairing, JPBC provides a ported and a PBC wrapped generator.
                    Here is the code to use them.
                </p>

                <source>import it.unisa.dia.gas.plaf.jpbc.pairing.a.TypeA1CurveGenerator;
import it.unisa.dia.gas.plaf.jpbc.pbc.curve.PBCTypeA1CurveGenerator;

// JPBC Type A1 pairing generator...
ParametersGenerator parametersGenerator = new TypeA1CurveGenerator(
    3,  // the number of primes
    517 // the bit length of each prime
);

// PBC Type A1 pairing generator. No parametrization in this case is possible.
// By default the generator uses two primes of 512 bit length each.
ParametersGenerator pbcPg = new PBCTypeA1CurveGenerator();
                </source>
            </subsection>

            <a name="TypeD"/>
            <subsection name="Type D">
                These are ordinary curves with embedding degree 6, whose orders are prime or a prime multiplied by a small constant.
                <p>
                    Further information are available
                    <a href="http://crypto.stanford.edu/pbc/manual/ch08s03.html">here</a>.
                </p>

                <p>
                    For Type D pairing, JPBC provides only the PBC wrapped generator.
                    Here is the code to use it.
                </p>
                
                <source>import it.unisa.dia.gas.plaf.jpbc.pbc.curve.PBCTypeDCurveGenerator;

// Init the generator...
int discriminant = 9563;
ParametersGenerator parametersGenerator = new PBCTypeDParametersGenerator(discriminant);
</source>
            </subsection>

            <a name="TypeE"/>
            <subsection name="Type E">
                <p>
                    The CM (Complex Multiplication) method of constructing
                    elliptic curves starts with the Diophantine equation
                    <span lang="latex">DV^2=4q-t^3</span>
                    If
                    <span lang="latex">t=2</span>
                    and
                    <span lang="latex">q=Dr^2h^2+1</span> for some
                    prime
                    <span lang="latex">r</span>
                    (which we choose to be a Solinas prime) and some
                    integer
                    <span lang="latex">h</span>, we find that this equation is easily solved with
                    <span lang="latex">V = 2rh</span>.
                </p>

                <p>
                    Thus it is easy to find a curve (over the field
                    <span lang="latex">\mathbb{F}_q</span>.
                    with order
                    <span lang="latex">q-1</span>.
                    Note
                    <span lang="latex">r^2</span>.
                    divides
                    <span lang="latex">q-1</span>.
                    thus we have an embedding degree of 1.
                </p>

                <p>
                    Further information are available
                    <a href="http://crypto.stanford.edu/pbc/manual/ch08s03.html">here</a>.
                </p>

                <p>
                    For Type E pairing, JPBC provides a ported and a PBC wrapped generator.
                    Here is the code to use them.
                </p>

                <source>import it.unisa.dia.gas.plaf.jpbc.pairing.e.TypeECurveGenerator;
import it.unisa.dia.gas.plaf.jpbc.pbc.curve.PBCTypeECurveGenerator;

int rBits = 160;
int qBits = 1024;

// JPBC Type E pairing generator...
ParametersGenerator pg = new TypeECurveGenerator(rBits, qBits);
// PBC Type E pairing generator...
ParametersGenerator pbcPg = new PBCTypeECurveGenerator(rBits, qBits);
                </source>
            </subsection>


            <a name="TypeF"/>
            <subsection name="Type F">
                <p>
                    Using carefully crafted polynomials, k = 12 pairings can be constructed.
                    Only 160 bits are needed to represent elements of one group,
                    and 320 bits for the other.
                    Also, embedding degree k = 12 allows higher security short signatures.
                    (k = 6 curves cannot be used to scale security from 160-bits
                    to say 256-bits because finite field attacks are subexponential.)
                    <br/>
                    Discovered by Barreto and Naehrig, "Pairing-friendly elliptic curves of prime order".
                </p>

                <p>
                    Further information are available
                    <a href="http://crypto.stanford.edu/pbc/manual/ch08s03.html">here</a>.
                </p>

                <p>
                    For Type F pairing, JPBC provides a ported and a PBC wrapped generator.
                    Here is the code to use them.
                </p>

                <source>import it.unisa.dia.gas.plaf.jpbc.pairing.f.TypeFCurveGenerator;
import it.unisa.dia.gas.plaf.jpbc.pbc.curve.PBCTypeFCurveGenerator;

int rBits = 160;

// JPBC Type F pairing generator...
ParametersGenerator pg = new TypeFCurveGenerator(rBits);
// PBC Type F pairing generator...
ParametersGenerator pbcPg = new PBCTypeFCurveGenerator(rBits);
                </source>
            </subsection>


            <a name="TypeG"/>
            <subsection name="Type G">
                <p>
                Another construction based on the CM method.
                Discovered by Freeman, "Constructing pairing-friendly elliptic curves with embedding degree 10."
                </p>
                <p>
                    Further information are available
                    <a href="http://crypto.stanford.edu/pbc/manual/ch08s09.html">here</a>.
                </p>

                <p>
                    For Type G pairing, JPBC provides only the PBC wrapped generator.
                    Here is the code to use it.
                </p>

                <source>import it.unisa.dia.gas.plaf.jpbc.pbc.curve.PBCTypeGCurveGenerator;

// Init the generator...
int discriminant = 35707;
ParametersGenerator parametersGenerator = new PBCTypeGParametersGenerator(discriminant);
                </source>
            </subsection>

        </section>
    </body>
</document>

<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>JPBC : Schemes</title>
        <author email="jpbclib@gmail.com">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Key Encapsulation Mechanism">

            <p>
                [Wikipedia] Key encapsulation mechanisms (KEMs) are a class of
                encryption techniques designed to secure symmetric cryptographic key material for transmission using
                asymmetric (public-key) algorithms. In practice, public key systems are clumsy to use in transmitting
                long messages. Instead they are often used to exchange symmetric keys, which are relatively short.
                The symmetric key is then used to encrypt the longer message.

                The traditional approach to sending a symmetric key with public key systems is to first generate a
                random symmetric key and then encrypt it using the chosen public key algorithm. The recipient then
                decrypts the public key message to recover the symmetric key. As the symmetric key is generally short,
                padding is required for full security and proofs of security for padding schemes are often less than
                complete. KEMs simplify the process by generating a random element in the finite group
                underlying the public key system and deriving the symmetric key by hashing that element, eliminating
                the need for padding.
            </p>

            <p>
                Then, JPBC provides a support class called <code>KEMCipher</code>
                which simplifies the integration of a KEM and a Cipher.
                An example of usage of this class is the following.
            </p>

            <subsection name="Usage">
<pre>

<a name="l1"><span class="ln">1    </span></a><span class="s0">package </span><span class="s1">it.unisa.dia.gas.crypto.kem;
<a name="l2"><span class="ln">2    </span></a>
<a name="l3"><span class="ln">3    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.circuit.Circuit;
<a name="l4"><span class="ln">4    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.circuit.DefaultCircuit;
<a name="l5"><span class="ln">5    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.abe.gghsw13.engines.GGHSW13KEMEngine;
<a name="l6"><span class="ln">6    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.abe.gghsw13.generators.GGHSW13KeyPairGenerator;
<a name="l7"><span class="ln">7    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.abe.gghsw13.generators.GGHSW13ParametersGenerator;
<a name="l8"><span class="ln">8    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.abe.gghsw13.generators.GGHSW13SecretKeyGenerator;
<a name="l9"><span class="ln">9    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.abe.gghsw13.params.*;
<a name="l10"><span class="ln">10   </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.kem.cipher.engines.KEMCipher;
<a name="l11"><span class="ln">11   </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.kem.cipher.params.KEMCipherDecryptionParameters;
<a name="l12"><span class="ln">12   </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.kem.cipher.params.KEMCipherEncryptionParameters;
<a name="l13"><span class="ln">13   </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;
<a name="l14"><span class="ln">14   </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.plaf.jpbc.util.concurrent.ExecutorServiceUtils;
<a name="l15"><span class="ln">15   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.AsymmetricCipherKeyPair;
<a name="l16"><span class="ln">16   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.CipherParameters;
<a name="l17"><span class="ln">17   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.jce.provider.BouncyCastleProvider;
<a name="l18"><span class="ln">18   </span></a>
<a name="l19"><span class="ln">19   </span></a></span><span class="s0">import </span><span class="s1">javax.crypto.Cipher;
<a name="l20"><span class="ln">20   </span></a></span><span class="s0">import </span><span class="s1">javax.crypto.spec.IvParameterSpec;
<a name="l21"><span class="ln">21   </span></a></span><span class="s0">import </span><span class="s1">java.security.GeneralSecurityException;
<a name="l22"><span class="ln">22   </span></a></span><span class="s0">import </span><span class="s1">java.security.SecureRandom;
<a name="l23"><span class="ln">23   </span></a></span><span class="s0">import </span><span class="s1">java.security.Security;
<a name="l24"><span class="ln">24   </span></a></span><span class="s0">import </span><span class="s1">java.security.spec.AlgorithmParameterSpec;
<a name="l25"><span class="ln">25   </span></a>
<a name="l26"><span class="ln">26   </span></a></span><span class="s0">import static </span><span class="s1">it.unisa.dia.gas.crypto.circuit.Circuit.Gate.Type.*;
<a name="l27"><span class="ln">27   </span></a></span><span class="s0">import static </span><span class="s1">org.junit.Assert.assertEquals;
<a name="l28"><span class="ln">28   </span></a>
<a name="l29"><span class="ln">29   </span></a>
<a name="l30"><span class="ln">30   </span></a></span><span class="s2">/**
<a name="l31"><span class="ln">31   </span></a> * </span><span class="s3">@author </span><span class="s2">Angelo De Caro (jpbclib@gmail.com)
<a name="l32"><span class="ln">32   </span></a> */</span><span class="s1">
<a name="l33"><span class="ln">33   </span></a></span><span class="s0">public class </span><span class="s1">KEMCipherGGHSW13KEM {
<a name="l34"><span class="ln">34   </span></a>    </span><span class="s0">protected </span><span class="s1">KEMCipher kemCipher;
<a name="l35"><span class="ln">35   </span></a>    </span><span class="s0">protected </span><span class="s1">AlgorithmParameterSpec iv;
<a name="l36"><span class="ln">36   </span></a>
<a name="l37"><span class="ln">37   </span></a>    </span><span class="s0">protected </span><span class="s1">AsymmetricCipherKeyPair keyPair;
<a name="l38"><span class="ln">38   </span></a>
<a name="l39"><span class="ln">39   </span></a>
<a name="l40"><span class="ln">40   </span></a>    </span><span class="s0">public </span><span class="s1">KEMCipherGGHSW13KEM() </span><span class="s0">throws </span><span class="s1">GeneralSecurityException {
<a name="l41"><span class="ln">41   </span></a>        </span><span class="s0">this</span><span class="s1">.kemCipher = </span><span class="s0">new </span><span class="s1">KEMCipher(
<a name="l42"><span class="ln">42   </span></a>                Cipher.getInstance(</span><span class="s4">&quot;AES/CBC/PKCS7Padding&quot;</span><span class="s1">, </span><span class="s4">&quot;BC&quot;</span><span class="s1">),
<a name="l43"><span class="ln">43   </span></a>                </span><span class="s0">new </span><span class="s1">GGHSW13KEMEngine()
<a name="l44"><span class="ln">44   </span></a>        );
<a name="l45"><span class="ln">45   </span></a>
<a name="l46"><span class="ln">46   </span></a>        </span><span class="s2">// build the initialization vector.  This example is all zeros, but it</span><span class="s1">
<a name="l47"><span class="ln">47   </span></a>        </span><span class="s2">// could be any value or generated using a random number generator.</span><span class="s1">
<a name="l48"><span class="ln">48   </span></a>        iv = </span><span class="s0">new </span><span class="s1">IvParameterSpec(</span><span class="s0">new byte</span><span class="s1">[]{</span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">0</span><span class="s1">});
<a name="l49"><span class="ln">49   </span></a>    }
<a name="l50"><span class="ln">50   </span></a>
<a name="l51"><span class="ln">51   </span></a>
<a name="l52"><span class="ln">52   </span></a>    </span><span class="s0">public </span><span class="s1">AsymmetricCipherKeyPair setup(</span><span class="s0">int </span><span class="s1">n) {
<a name="l53"><span class="ln">53   </span></a>        SecureRandom random = </span><span class="s0">new </span><span class="s1">SecureRandom();
<a name="l54"><span class="ln">54   </span></a>        GGHSW13KeyPairGenerator setup = </span><span class="s0">new </span><span class="s1">GGHSW13KeyPairGenerator();
<a name="l55"><span class="ln">55   </span></a>        setup.init(</span><span class="s0">new </span><span class="s1">GGHSW13KeyPairGenerationParameters(
<a name="l56"><span class="ln">56   </span></a>                random,
<a name="l57"><span class="ln">57   </span></a>                </span><span class="s0">new </span><span class="s1">GGHSW13ParametersGenerator().init(
<a name="l58"><span class="ln">58   </span></a>                        random,
<a name="l59"><span class="ln">59   </span></a>                        PairingFactory.getPairing(</span><span class="s4">&quot;params/mm/ctl13/toy.properties&quot;</span><span class="s1">),
<a name="l60"><span class="ln">60   </span></a>                        n).generateParameters()
<a name="l61"><span class="ln">61   </span></a>        ));
<a name="l62"><span class="ln">62   </span></a>
<a name="l63"><span class="ln">63   </span></a>        </span><span class="s0">return </span><span class="s1">(keyPair = setup.generateKeyPair());
<a name="l64"><span class="ln">64   </span></a>    }
<a name="l65"><span class="ln">65   </span></a>
<a name="l66"><span class="ln">66   </span></a>
<a name="l67"><span class="ln">67   </span></a>    </span><span class="s0">public byte</span><span class="s1">[] initEncryption(String assignment) {
<a name="l68"><span class="ln">68   </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l69"><span class="ln">69   </span></a>            </span><span class="s0">return </span><span class="s1">kemCipher.init(
<a name="l70"><span class="ln">70   </span></a>                    </span><span class="s0">true</span><span class="s1">,
<a name="l71"><span class="ln">71   </span></a>                    </span><span class="s0">new </span><span class="s1">KEMCipherEncryptionParameters(
<a name="l72"><span class="ln">72   </span></a>                            </span><span class="s5">128</span><span class="s1">,
<a name="l73"><span class="ln">73   </span></a>                            </span><span class="s0">new </span><span class="s1">GGHSW13EncryptionParameters(
<a name="l74"><span class="ln">74   </span></a>                                    (GGHSW13PublicKeyParameters) keyPair.getPublic(),
<a name="l75"><span class="ln">75   </span></a>                                    assignment
<a name="l76"><span class="ln">76   </span></a>                            )
<a name="l77"><span class="ln">77   </span></a>                    ),
<a name="l78"><span class="ln">78   </span></a>                    iv
<a name="l79"><span class="ln">79   </span></a>            );
<a name="l80"><span class="ln">80   </span></a>        } </span><span class="s0">catch </span><span class="s1">(Exception e) {
<a name="l81"><span class="ln">81   </span></a>            </span><span class="s0">throw new </span><span class="s1">RuntimeException(e);
<a name="l82"><span class="ln">82   </span></a>        }
<a name="l83"><span class="ln">83   </span></a>    }
<a name="l84"><span class="ln">84   </span></a>
<a name="l85"><span class="ln">85   </span></a>    </span><span class="s0">public byte</span><span class="s1">[] encrypt(String message) {
<a name="l86"><span class="ln">86   </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l87"><span class="ln">87   </span></a>            </span><span class="s0">return </span><span class="s1">kemCipher.doFinal(message.getBytes());
<a name="l88"><span class="ln">88   </span></a>        } </span><span class="s0">catch </span><span class="s1">(Exception e) {
<a name="l89"><span class="ln">89   </span></a>            </span><span class="s0">throw new </span><span class="s1">RuntimeException(e);
<a name="l90"><span class="ln">90   </span></a>        }
<a name="l91"><span class="ln">91   </span></a>    }
<a name="l92"><span class="ln">92   </span></a>
<a name="l93"><span class="ln">93   </span></a>
<a name="l94"><span class="ln">94   </span></a>    </span><span class="s0">public </span><span class="s1">CipherParameters keyGen(Circuit circuit) {
<a name="l95"><span class="ln">95   </span></a>        GGHSW13SecretKeyGenerator keyGen = </span><span class="s0">new </span><span class="s1">GGHSW13SecretKeyGenerator();
<a name="l96"><span class="ln">96   </span></a>        keyGen.init(</span><span class="s0">new </span><span class="s1">GGHSW13SecretKeyGenerationParameters(
<a name="l97"><span class="ln">97   </span></a>                (GGHSW13PublicKeyParameters) keyPair.getPublic(),
<a name="l98"><span class="ln">98   </span></a>                (GGHSW13MasterSecretKeyParameters) keyPair.getPrivate(),
<a name="l99"><span class="ln">99   </span></a>                circuit
<a name="l100"><span class="ln">100  </span></a>        ));
<a name="l101"><span class="ln">101  </span></a>
<a name="l102"><span class="ln">102  </span></a>        </span><span class="s0">return </span><span class="s1">keyGen.generateKey();
<a name="l103"><span class="ln">103  </span></a>    }
<a name="l104"><span class="ln">104  </span></a>
<a name="l105"><span class="ln">105  </span></a>    </span><span class="s0">public byte</span><span class="s1">[] decrypt(CipherParameters secretKey, </span><span class="s0">byte</span><span class="s1">[] encapsulation, </span><span class="s0">byte</span><span class="s1">[] ciphertext) {
<a name="l106"><span class="ln">106  </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l107"><span class="ln">107  </span></a>            kemCipher.init(
<a name="l108"><span class="ln">108  </span></a>                    </span><span class="s0">false</span><span class="s1">,
<a name="l109"><span class="ln">109  </span></a>                    </span><span class="s0">new </span><span class="s1">KEMCipherDecryptionParameters(secretKey, encapsulation, </span><span class="s5">128</span><span class="s1">),
<a name="l110"><span class="ln">110  </span></a>                    iv
<a name="l111"><span class="ln">111  </span></a>            );
<a name="l112"><span class="ln">112  </span></a>            </span><span class="s0">return </span><span class="s1">kemCipher.doFinal(ciphertext);
<a name="l113"><span class="ln">113  </span></a>        } </span><span class="s0">catch </span><span class="s1">(Exception e) {
<a name="l114"><span class="ln">114  </span></a>            </span><span class="s0">throw new </span><span class="s1">RuntimeException(e);
<a name="l115"><span class="ln">115  </span></a>        }
<a name="l116"><span class="ln">116  </span></a>    }
<a name="l117"><span class="ln">117  </span></a>
<a name="l118"><span class="ln">118  </span></a>
<a name="l119"><span class="ln">119  </span></a>
<a name="l120"><span class="ln">120  </span></a>    </span><span class="s0">public static void </span><span class="s1">main(String[] args) {
<a name="l121"><span class="ln">121  </span></a>        Security.addProvider(</span><span class="s0">new </span><span class="s1">BouncyCastleProvider());
<a name="l122"><span class="ln">122  </span></a>
<a name="l123"><span class="ln">123  </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l124"><span class="ln">124  </span></a>            </span><span class="s2">// Setup</span><span class="s1">
<a name="l125"><span class="ln">125  </span></a>            </span><span class="s0">int </span><span class="s1">n = </span><span class="s5">4</span><span class="s1">;
<a name="l126"><span class="ln">126  </span></a>            KEMCipherGGHSW13KEM engine = </span><span class="s0">new </span><span class="s1">KEMCipherGGHSW13KEM();
<a name="l127"><span class="ln">127  </span></a>            engine.setup(n);
<a name="l128"><span class="ln">128  </span></a>
<a name="l129"><span class="ln">129  </span></a>            </span><span class="s2">// Encrypt</span><span class="s1">
<a name="l130"><span class="ln">130  </span></a>            String message = </span><span class="s4">&quot;Hello World!!!&quot;</span><span class="s1">;
<a name="l131"><span class="ln">131  </span></a>            </span><span class="s0">byte</span><span class="s1">[] encapsulation = engine.initEncryption(</span><span class="s4">&quot;1101&quot;</span><span class="s1">);
<a name="l132"><span class="ln">132  </span></a>            </span><span class="s0">byte</span><span class="s1">[] ciphertext = engine.encrypt(message);
<a name="l133"><span class="ln">133  </span></a>
<a name="l134"><span class="ln">134  </span></a>            </span><span class="s2">// Decrypt</span><span class="s1">
<a name="l135"><span class="ln">135  </span></a>            </span><span class="s0">int </span><span class="s1">q = </span><span class="s5">3</span><span class="s1">;
<a name="l136"><span class="ln">136  </span></a>            Circuit circuit = </span><span class="s0">new </span><span class="s1">DefaultCircuit(n, q, </span><span class="s5">3</span><span class="s1">, </span><span class="s0">new </span><span class="s1">DefaultCircuit.DefaultGate[]{
<a name="l137"><span class="ln">137  </span></a>                    </span><span class="s0">new </span><span class="s1">DefaultCircuit.DefaultGate(INPUT, </span><span class="s5">0</span><span class="s1">, </span><span class="s5">1</span><span class="s1">),
<a name="l138"><span class="ln">138  </span></a>                    </span><span class="s0">new </span><span class="s1">DefaultCircuit.DefaultGate(INPUT, </span><span class="s5">1</span><span class="s1">, </span><span class="s5">1</span><span class="s1">),
<a name="l139"><span class="ln">139  </span></a>                    </span><span class="s0">new </span><span class="s1">DefaultCircuit.DefaultGate(INPUT, </span><span class="s5">2</span><span class="s1">, </span><span class="s5">1</span><span class="s1">),
<a name="l140"><span class="ln">140  </span></a>                    </span><span class="s0">new </span><span class="s1">DefaultCircuit.DefaultGate(INPUT, </span><span class="s5">3</span><span class="s1">, </span><span class="s5">1</span><span class="s1">),
<a name="l141"><span class="ln">141  </span></a>
<a name="l142"><span class="ln">142  </span></a>                    </span><span class="s0">new </span><span class="s1">DefaultCircuit.DefaultGate(AND, </span><span class="s5">4</span><span class="s1">, </span><span class="s5">2</span><span class="s1">, </span><span class="s0">new int</span><span class="s1">[]{</span><span class="s5">0</span><span class="s1">, </span><span class="s5">1</span><span class="s1">}),
<a name="l143"><span class="ln">143  </span></a>                    </span><span class="s0">new </span><span class="s1">DefaultCircuit.DefaultGate(OR, </span><span class="s5">5</span><span class="s1">, </span><span class="s5">2</span><span class="s1">, </span><span class="s0">new int</span><span class="s1">[]{</span><span class="s5">2</span><span class="s1">, </span><span class="s5">3</span><span class="s1">}),
<a name="l144"><span class="ln">144  </span></a>
<a name="l145"><span class="ln">145  </span></a>                    </span><span class="s0">new </span><span class="s1">DefaultCircuit.DefaultGate(AND, </span><span class="s5">6</span><span class="s1">, </span><span class="s5">3</span><span class="s1">, </span><span class="s0">new int</span><span class="s1">[]{</span><span class="s5">4</span><span class="s1">, </span><span class="s5">5</span><span class="s1">}),
<a name="l146"><span class="ln">146  </span></a>            });
<a name="l147"><span class="ln">147  </span></a>            </span><span class="s0">byte</span><span class="s1">[] plaintext = engine.decrypt(engine.keyGen(circuit), encapsulation, ciphertext);
<a name="l148"><span class="ln">148  </span></a>
<a name="l149"><span class="ln">149  </span></a>            assertEquals(</span><span class="s0">true</span><span class="s1">, message.equals(</span><span class="s0">new </span><span class="s1">String(plaintext)));
<a name="l150"><span class="ln">150  </span></a>        } </span><span class="s0">catch </span><span class="s1">(Exception e) {
<a name="l151"><span class="ln">151  </span></a>            e.printStackTrace();
<a name="l152"><span class="ln">152  </span></a>        } </span><span class="s0">finally </span><span class="s1">{
<a name="l153"><span class="ln">153  </span></a>            ExecutorServiceUtils.shutdown();
<a name="l154"><span class="ln">154  </span></a>        }
<a name="l155"><span class="ln">155  </span></a>    }
<a name="l156"><span class="ln">156  </span></a>
<a name="l157"><span class="ln">157  </span></a>}</span></pre>
            </subsection>
        </section>
    </body>
</document>
